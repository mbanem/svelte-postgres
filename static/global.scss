@use 'sass:math';
@import url('https://fonts.googleapis.com/css2?family=Roboto+Serif:opsz,wght@8..144,300;8..144,400&display=swap');
$base-font-size: 16px;
$base-font_size: 16;

:root {
	// font-size: root-font-size-function("100vw");
	background-color: #1d1d1d;
	color: #fff;
	$font-size: 48px;
	--font-size: 24px;
	--LINK-COLOR: skyblue;
	--LINK-HOVER: rgb(44, 120, 150);
	--LINK-ACTIVE: red;
}

h2 {
	color: $color;
	font-family: 'Times New Roman', Times, serif;
	font-weight: 600;
	font-style: italic;
	width: 100vw;
	text-align: center;
}

.page-title {
	color: $title-color;
	font-family: 'Times New Roman', Times, serif;
	font-size: 30px;
	font-weight: 400;
	font-style: italic;
	width: 100vw;
	text-align: center;
	letter-spacing: 0.1em;
	text-shadow: 5px 5px 5px $border-color;
}
@mixin caterpillar-item($bgcolor) {
	background-color: $bgcolor;
	color: white;
	border-radius: 5px;
	border: 1px solid gray;
	display: inline-block;
	line-height: 50px;
	text-align: center;
	width: 50px;
	&:hover {
		color: yellow;
		border-color: lightgreen;
	}
	&:target {
		background-color: blue;
	}
}
// a:any-link {
// 	color: var(--LINK-COLOR);
// 	text-decoration: none;
// }
// a:hover,
// a:focus-visible {
// 	color: var(--LINK-HOVER);
// }
// a:active {
// 	color: var(--LINK-ACTIVE);
// }

.button {
	border: 2px solid transparent;
	border-radius: 5px;
	color: white;
	background-color: navy;
	cursor: pointer;
	user-select: none;
	&:hover {
		border-color: lightgreen;
	}
}
.button-sm {
	@extend .button;
	padding: 2px 6px;
	width: 4px;
	height: 1.2rem;
}
.button-md {
	@extend .button;
	padding: 2px 6px;
	width: 6rem;
	padding: 5px 1rem;
}
.button-lg {
	@extend .button;
	padding: 2px 6px;
	width: 8rem;
	font-size: 18px;
	padding: 5px 1rem;
}
.button-xl {
	@extend .button;
	padding: 2px 6px;
	width: 12rem;
	font-size: 18px;
	padding: 5px 1rem;
}
.button-xxl {
	@extend .button;
	padding: 2px 6px;
	width: 18rem;
	font-size: 18px;
	padding: 5px 1rem;
}
@mixin button() {
	display: inline-block;
	font-size: 16px;
	text-decoration: none;
	@content;
}
@mixin mixin-item($width: 5.5rem) {
	background-color: navy;
	color: white;
	border-radius: 5px;
	border: 1px solid gray;
	display: inline-block;
	padding: 3px 2px;
	text-align: center;
	width: $width;
	&:hover {
		color: yellow;
		border-color: lightgreen;
	}
	&:target {
		background-color: blue;
	}
}
input [type='number'] {
	width: 4rem;
	height: 2rem;
	font-size: 18px;
	padding: 4px;
}
// @function root-font-size-function($viewport) {
//   $size: calc(14px + 3 * ((#{$viewport} - 320px) / 680));
//   @return $size;
// }
html {
	font-family: 'Times New Roman', Times, serif;
	// font-size: 16psx;
}
.navbar-button {
	display: inline-block;
	background-color: rgb(5, 5, 153);
	color: lightgreen;
	border-radius: 5px;
	padding: 2px 0.5rem;
	border: 2px solid transparent;
	text-align: center;
	min-width: 6rem;
	height: 1.5rem;
	font-size: 20px;
	cursor: pointer;
	user-select: none;
	user-select: none;
	outline: none;
	margin: 0 4px;
	text-transform: uppercase;
	&:hover {
		color: yellow;
		border-color: lightgreen;
	}
}

// Aliases
@function string($input) {
	@return str($input);
}

@function number($input) {
	@return num($input);
}

/// Remove the unit of a length
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
@function strip-unit($number) {
	@if type-of($number) == 'number' and not unitless($number) {
		@return math.div($number, ($number * 0 + 1));
	}

	@return $number;
}
@mixin button() {
	display: inline-block;
	font-size: 16px;
	text-decoration: none;
	@content;
}
@mixin capitalize($fs: 1rem) {
	// $fs: to-unit(unit($fs), $fs);
	font-size: $fs;
	text-transform: capitalize;
	$lh: #{2.8 - (strip-unit($fs) * 0.00625 + 1.3)};

	@if unit($fs) ==1ch {
		$lh: $lh / 2;
	}

	line-hight: $lh;
}
section ul[style^='margin'] li.list-item {
	@for $i from 1 through 4 {
		$marker-starting-hue: 0deg;
		$hue-variation: 35;
		font-size: var(--font-size);

		// @include capitalize(16px);
		// change color for marker and then for li text
		&:nth-child(#{$i}) {
			&::marker {
				color: hsl($marker-starting-hue + $i * $hue-variation, 70%, 50%);
			}

			color: hsl($marker-starting-hue + $i * $hue-variation, 70%, 50%);
		}
	}

	&:hover {
		opacity: 0.8;
	}

	:global(pre) {
		font-size: 20px;
		margin: 1rem 0 0 1rem;
		color: forestgreen;
	}
	h2 {
		color: royalblue;
		margin: 2rem auto;
		width: 30rem;
		font-family: 'Times New Roman', Times, serif;
		font-weight: 400;
		text-align: center;
	}
}
// Conversion function
// prettier-ignore
@function to-unit($unit, $input) {
	// Test against valid CSS units. should get 0 followed by unit e.g. 0rem, 0px
	$to-unit: map-get(
		(
			px: 0px,
			pt: 0pt,
			pc: 0pc,
			in: 0in,
			mm: 0mm,
			cm: 0cm,
			q: 0Q,
			// absolute length
			em: 0em,
			rem: 0rem,
			ch: 0ch,
			ex: 0ex,
			// relative length - font based
			vw: 0vw,
			vh: 0vh,
			vmin: 0vmin,
			vmax: 0vmax,
			// relative length - viewport based
			deg: 0deg,
			turn: 0turn,
			grad: 0grad,
			rad: 0rad,
			// angle
			s: 0s,
			ms: 0ms,
			// time
			hz: 0Hz,
			khz: 0kHz,
			// frequency
			dpi: 0dpi,
			dpcm: 0dpcm,
			dppx: 0dppx,
			// resolution
			pct: 0%,
			percent: 0%,
			num: 0,
			number: 0 // percent or number
		),
		$unit
	);

	// Incomparable units are caught in conversion none of specified is found
	@if not $to-unit {
		@error 'Could not convert to `#{$unit}` – must be a valid CSS unit';
		@return null;
	}

	// Number/incomparable conversion
	@if index(num number ex ch vw vh vmin vmax, $unit) {
		$value: num($input);
	}

	// EM/REM conversion using px as base
	@if index(em rem, unit($input)) {
		$input: floor(strip-unit($input)) * $base-font_size * 1px; // * $base-font-size / 1px;
	} @else if index(em rem, $unit) and not unitless($input) {
		$input: floor(strip-unit($input)) * $base-font_size * 1px;
	}

	// Bug fix – resolution units seems to be flipped
	@if index(dpi dpcm dppx, $unit) {
		$units: (
			dppx: 0dppx,
			dpcm: 0dpcm,
			dpi: 0dpi
		);
		$input-unit: map-get($units, unit($input));
		$input: if(1dppx < 95dpi, num($input-unit + (num($input) + $to-unit)), $input);
	}

	@return $input;
}
$font-size: (24px, 22px, 20px, 18px);
$f: 1;
$e: 4;
@for $i from $f through $e {
	h#{$i} {
		font-size: nth($font-size, $i);
	}
}
// check mark for visited links
$content: '\2713' + ' ';

a:visited:before {
	content: '#{$content}';
}
