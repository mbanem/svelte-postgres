@import './mixins.scss';
:root {
	--BODY-COLOR: #e3e3e3;
	--BODY-BACKGROUND-COLOR: #3e3e3e;

	--H-COLOR: royalblue;
	--INPUT-COLOR: #e3e3e3;
	--INPUT-BACKGROUND-COLOR: #3e3e3e;
	--INPUT-FOCUS-COLOR: lightgreen;
	--PLACEHOLDER_COLOR: #8e8e8e;

	--BUTTON-COLOR: #e3e3e3;
	--BUTTON-HOVER-COLOR: rgb(222, 206, 141);
	--BUTTON-TARGET-COLOR: blue;
	--BUTTON-BACKGROUND-COLOR: #3e3e3e;
	--BUTTON-BACKGROUND: 1px solid gray;

	--LINK-COLOR: white;
	--LINK-BACKGROUND-COLOR: navy;
	--LINK-HOVER: yellow;
	--LINK-BORDER: 1px solid gray;
	--LINK-DISABLED: gray;
	--LINK-ACTIVE: lightgreen;

	--BORDER: 1px solid gray;
	--BORDER-COLOR: yellow;
	--BORDER-HOVER-COLOR: var(--BORDER-COLOR);
	--BORDER-RADIUS: 5px;

	--MESSAGE-COLOR: lightgreen;

	--TITLE-COLOR: skyblue;
	--TITLE-SHADOW: 5px 5px 5px navy;
	--PRE-COLOR: skyblue;
	--PRE-FONT-SIZE: 16px;

	--TITLE-COLOR: #e3e3e3;
	--TITLE-BACKGROUND-COLOR: royalblue;

	--TOOLTIP-COLOR: lightgreen;
	--TOOLTIP-BACKGROUND-COLOR: black;
	--TOOLTIP-BORDER: 1px solid gray;
	--TOOLTIP-BORDER-RADIUS: 4px;

	--ANCHOR-COLOR: lightgreen;
	--ANCHOR-HOVER-COLOR: yellow;
	--ANCHOR-ACTIVE-COLOR: lightgreen;

	--BLOCK-COLOR: gray;
	--BLOCK-BORDER: 1px solid gray;
	--BLOCK-BORDER-RADIUS: 4px;

	--SELECT-OPTION-COLOR: #e3e3e3;
	--SELECT-OPTION-HOVER-COLOR: yellow;
	--SELECT-OPTION-SELECTED-COLOR: lightgreen;
}
:global(html) {
	font-family: 'Times New Roman', Times, serif;
	font-size: 16psx;
}
:global(body) {
	padding: 0;
	margin: 0;
	color: var(--BODY-COLOR);
	background-color: VAR(--BODY-BACKGROUND-COLOR);
	position: relative;
}
.expression-highlighted {
	display: inline-block;
	font-size: 18px;
	font-weight: 400;
	color: yellow;
}
.tooltip-wrapper {
	position: relative;
}
.absolute {
	position: absolute;
}
.relative {
	position: relative;
}
h1,
h2,
h3,
h4,
h5,
h6 {
	display: inline-block;
	width: max-content;
	color: var(--H-COLOR);
	font-family: 'Times New Roman', Times, serif;
	font-weight: 600;
	font-style: italic;
	text-align: center;
	padding: 3px 1rem;
}
.title {
	display: inline-block;
}
.page-title {
	color: var(--TITLE-COLOR);
	font-family: 'Times New Roman', Times, serif;
	font-size: 30px;
	font-weight: 400;
	font-style: italic;
	width: 100vw;
	text-align: center;
	letter-spacing: 0.1em;
	text-shadow: var(--TITLE-SHADOW);
}
.label-title {
	display: inline-block;
	width: max-content;
	font-size: 18px;
	padding: 4px 1rem;
	margin: 0;
	color: var(--TITLE-COLOR);
	background-color: var(--TITLE-BACKGROUND-COLOR);
	border-radius: 5px;
}

.div-button {
	display: inline-block;
	width: 5rem;
	height: 1.5rem;
	border: 1px solid gray;
	border-radius: 5px;
	text-align: center;
	line-height: 1.5rem;
	cursor: pointer;
	margin: 0;
	&:not(:last-child) {
		margin-right: 6px;
	}
}
button,
.button {
	width: max-content;
	padding: 6px 1.5rem;
	border: 1px solid gray;
	border-radius: 5px;
	color: var(--BUTTON-COLOR);
	background-color: var(--BUTTON-BACKGROUND-COLOR) !important;
	word-break: keep-all;
	cursor: pointer;
	user-select: none;
	&:hover,
	&:active {
		color: var(--BUTTON-HOVER-COLOR);
		border-color: var(--BUTTON-HOVER-COLOR);
	}
	&:disabled {
		background-color: gray;
	}
	&:target {
		color: var(--BUTTON-TARGET-COLOR);
	}
}

.hidden {
	display: none;
}
.button-sm {
	@extend .button;
	padding: 2px 6px;
	width: max-content;
	height: 1.2rem;
}
.button-md {
	@extend .button;
	padding: 2px 6px;
	width: max-content;
	padding: 5px 1rem;
}
.button-lg {
	@extend .button;
	padding: 2px 6px;
	width: max-content;
	font-size: 18px;
	padding: 5px 1rem;
}
.button-xl {
	@extend .button;
	padding: 2px 6px;
	width: max-content;
	font-size: 18px;
	padding: 5px 1rem;
}
.button-xxl {
	@extend .button;
	padding: 2px 6px;
	width: max-content;
	font-size: 18px;
	padding: 5px 1.5rem;
}

@mixin button() {
	display: inline-block;
	font-size: 16px;
	text-decoration: none;
	border-radius: 5px;
	border: 1px solid gray;
	display: inline-block;
	padding: 3px 1rem;
	text-align: center;
	width: max-content;
	&:hover {
		color: var(--BUTTON-HOVER-COLOR);
		border-color: var(--BUTTON-HOVER-COLOR);
	}
	&:target {
		background-color: var(--BUTTON-TARGET-COLOR);
	}
}
@mixin capitalize($font-size: 1rem) {
	// $fs: to-unit(unit($fs), $fs);
	font-size: $font-size;
	text-transform: capitalize;
	$line-height: #{2.8 - (strip-unit($font-size) * 0.00625 + 1.3)};

	@if unit($font-size) ==1ch {
		$line-height: $line-height / 2;
	}

	line-hight: $line-height;
}
.navbar-button {
	display: inline-block;
	background-color: rgb(5, 5, 153);
	color: lightgreen;
	border-radius: 5px;
	padding: 2px 0.5rem;
	border: 2px solid transparent;
	text-align: center;
	min-width: 6rem;
	height: 1.5rem;
	font-size: 20px;
	cursor: pointer;
	user-select: none;
	user-select: none;
	outline: none;
	margin: 0 4px;
	text-transform: uppercase;
	&:hover {
		color: var(--BORDER-HOVER-COLOR);
		border-color: var(--BUTTON-HOVER-COLOR);
	}
}
:global(pre) {
	font-size: 20px;
	margin: 1rem 0 0 1rem;
	color: var(--PRE-COLOR);
}
pre {
	display: inline-block;
	color: var(--PRE-COLOR);
	font-size: var(--PRE-FONT-SIZE);
	padding: 1rem;
}

section ul[style^='margin'] li.list-item {
	@for $i from 1 through 4 {
		// font-size: var(--font-size);
		$marker-starting-hue: 0deg;
		$hue-variation: 35;

		// @include capitalize(16px);
		// change color for marker and then for li text
		&:nth-child(#{$i}) {
			color: hsl($marker-starting-hue + $i * $hue-variation, 70%, 50%);
			&::marker {
				color: hsl($marker-starting-hue + $i * $hue-variation, 70%, 50%);
			}
		}
	}

	&:hover {
		opacity: 0.8;
	}

	h2 {
		margin: 2rem auto;
		width: 30rem;
		font-family: 'Times New Roman', Times, serif;
		font-weight: 400;
		text-align: center;
	}
}

input[type='text'],
input[type='email'],
input[type='password'] {
	display: inline-block;
	height: 1.8rem;
	margin-bottom: 10px;
	width: 30rem;
	font-size: 16px;
	padding: 4px 1rem;
	color: var(--INPUT-COLOR);
	background-color: var(--INPUT-BACKGROUND-COLOR);
	outline: none;
	border: 1px solid gray;
	border-radius: 4px;
	&::placeholder {
		color: var(--PLACEHOLDER_COLOR);
	}
	&:hover,
	&:focus {
		color: var(--INPUT-FOCUS-COLOR);
	}
}
input[type='number'] {
	width: 3.5rem;
	height: 1.2rem;
	color: var(--INPUT-COLOR);
	background-color: var(--INPUT-BACKGROUND-COLOR);
	font-size: 16px;
	padding: 4px 0 4px 8px;
	font-weight: 400;
	border-radius: 4px;
	outline: none;
	&:focus {
		color: var(--INPUT-FOCUS-COLOR);
	}
}
textarea {
	width: 33rem;
	height: 23rem;
	text-align: left;
	color: var(--INPUT-COLOR);
	margin-top: 1rem;
	overflow-y: auto;
	background-color: var(--INPUT-BACKGROUND-COLOR);
	outline: none;
	&:focus,
	&:active {
		color: var(--INPUT-FOCUS-COLOR);
		background-color: var(--INPUT-BACKGROUND-COLOR);
	}
	&::placeholder {
		color: var(--PLACEHOLDER-COLOR);
		font-weight: normal;
	}
}
@function string($input) {
	@return str($input);
}

@function number($input) {
	@return num($input);
}
@function root-font-size-function($viewport) {
	$size: calc(14px + 3 * ((#{$viewport} - 320px) / 680));
	@return $size;
}
/// Remove the unit of a length
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
@function strip-unit($number) {
	@if type-of($number) == 'number' and not unitless($number) {
		@return math.div($number, ($number * 0 + 1));
	}

	@return $number;
}

a {
	display: inline-block;
	border: 1px solid gray;
	border-radius: 5px;
	padding: 3px 1.5rem;
	color: var(--ANCHOR-COLOR);
	text-decoration: none;
	text-align: center;
	user-select: none;
	cursor: pointer;

	&:hover,
	&:focus-visible {
		color: var(--ANCHOR-HOVER-COLOR);
		border-color: var(--ANCHOR-HOVER-COLOR);
	}
	&:active {
		color: var(-ANCHOR-ACTIVE-COLOR);
	}
}
a-block {
	display: inline-block;
	inline-size: auto;
	border: var(--BLOCK-BORDER);
	color: var(--BLOCK-COLOR);
	border-radius: var(--BLOCK-BORDER-RADIUS);
	padding: 8px 1rem;
	margin-left: 0.5rem;
}
a-button {
	@extend a;
	@extend a-block;
	text-decoration: none;
	padding: 4px 1rem;

	&:hover {
		color: var(--BUTTON-HOVER-COLOR);
		border-color: var(--BUTTON-HOVER-COLOR);
	}
}

/* end of defining a-button */

nav a:any-link {
	@extend a;
	@extend a-block;
}

.relative {
	position: relative;

	.tooltip {
		position: absolute;
		top: -3rem;
		display: inline-block;
		width: max-content;
		font-size: 14px;
		font-weight: 400;
		padding: 3px 1rem;
		border: var(--TOOLTIP-BORDER);
		border-radius: 4var (--TOOLTIP-BORDER-RADIUS);
		background-color: var(--TOOLTIP-BACKGROUND-COLOR);
		text-align: center;
		margin-bottom: 6px;
	}
	.master {
		color: var(--TOOLTIP-COLOR);
		font-size: 14px;
		font-weight: 400;
		p {
			padding: 0;
			margin: 0;
		}
	}
	/* master class has higher specificity than tooltip class, e.g. */
	/* <Tooltip
				placement="top"
				type="custom"
				defaultClass="tooltip"
				class="master"
				arrow={false}
		>
			flowbite-svelte Tooltip
		</Tooltip>
		NOTE: defaultClass holds primary style
		while master class could be for warning, error,...
	*/
}
// Conversion function
// prettier-ignore
@function to-unit($unit, $input) {
	// Test against valid CSS units. should get 0 followed by unit e.g. 0rem, 0px
	$to-unit: map-get(
		(
			px: 0px,
			pt: 0pt,
			pc: 0pc,
			in: 0in,
			mm: 0mm,
			cm: 0cm,
			q: 0Q,
			// absolute length
			em: 0em,
			rem: 0rem,
			ch: 0ch,
			ex: 0ex,
			// relative length - font based
			vw: 0vw,
			vh: 0vh,
			vmin: 0vmin,
			vmax: 0vmax,
			// relative length - viewport based
			deg: 0deg,
			turn: 0turn,
			grad: 0grad,
			rad: 0rad,
			// angle
			s: 0s,
			ms: 0ms,
			// time
			hz: 0Hz,
			khz: 0kHz,
			// frequency
			dpi: 0dpi,
			dpcm: 0dpcm,
			dppx: 0dppx,
			// resolution
			pct: 0%,
			percent: 0%,
			num: 0,
			number: 0 // percent or number
		),
		$unit
	);

	// Incomparable units are caught in conversion none of specified is found
	@if not $to-unit {
		@error 'Could not convert to `#{$unit}` â€“ must be a valid CSS unit';
		@return null;
	}

	// Number/incomparable conversion
	@if index(num number ex ch vw vh vmin vmax, $unit) {
		$value: num($input);
	}

	// EM/REM conversion using px as base
	@if index(em rem, unit($input)) {
		$input: floor(strip-unit($input)) * $base-font_size * 1px; // * $base-font-size / 1px;
	} @else if index(em rem, $unit) and not unitless($input) {
		$input: floor(strip-unit($input)) * $base-font_size * 1px;
	}

	// Bug fix â€“ resolution units seems to be flipped
	@if index(dpi dpcm dppx, $unit) {
		$units: (
			dppx: 0dppx,
			dpcm: 0dpcm,
			dpi: 0dpi
		);
		$input-unit: map-get($units, unit($input));
		$input: if(1dppx < 95dpi, num($input-unit + (num($input) + $to-unit)), $input);
	}

	@return $input;
}

$font-size: (24px, 22px, 20px, 18px);
$from: 1;
$to: 4;
@for $i from $from through $to {
	h#{$i} {
		font-size: nth($font-size, $i);
	}
}
// check mark for visited links
$content: '\2713' + ' ';

a:visited:before {
	content: '#{$content}';
}
