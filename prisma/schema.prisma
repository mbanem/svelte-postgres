// This is
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id      			String   @id @default(uuid())
  firstName    	String   @map("first_name")
  lastName    	String   @map("last_name")
  email   			String
  passwordHash 	String   @map("password_hash")
  userAuthToken	String   @unique @map("user_auth_token")

  role          Role    @default(USER)
  profile 			Profile?

  posts   			Post[]
  articles      Article[]
  todos         Todo[]    //arrays are optional and can be empry

  createdAt DateTime @default(now())   @map("created_at")
  updatedAt DateTime? @updatedAt        @map("updated_at")

	@@unique(name: "fullNameEmail", [firstName, lastName, email])
  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model Profile {
  id     		String  @id @default(uuid())
  bio    		String?

  user   		User    @relation(fields: [userId], references: [id])
  userId 		String  @unique    @map("user_id")

  createdAt DateTime @default(now())   @map("created_at")
  updatedAt DateTime @updatedAt        @map("updated_at")

  @@map("profile")
}

model Article {
    id      	String @id @default(uuid())
    title   	String
    content 	String

    author 	 	User 	 @relation(fields: [authorId], references: [id])
    authorId 	String @map("author_id")

    @@map("article")
}

model Post {
  id        String 	 @id @default(uuid())
  title     String   @db.VarChar(255)
  content   String?
  published Boolean  @default(false)

  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @map("author_id")

  categories Category[]

  createdAt DateTime @default(now())   @map("created_at")
  updatedAt DateTime @updatedAt        @map("updated_at")

  @@map("post")
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[]

  @@map("category")
}

model Todo {
  id        String  @id @default(uuid())
  title     String
  content   String
  priority  Int     @default(0)
  completed Boolean @default(false)

  user   		User    @relation(fields: [userId], references: [id])
  userId 		String  @unique    @map("user_id")

  createdAt DateTime @default(now())   @map("created_at")
  updatedAt DateTime @updatedAt        @map("updated_at")

  @@map("todo")
}


// Use enums if database supports it
// https://www.prisma.io/docs/reference/database-reference/database-features#misc

// @@unique([firstName, lastname, email], name: fnlnemail) is ignored by Prisma
// she created  "User__firstName_lastName_email_key"

// db.findUnique({
//   where: {
//     User__firstName_lastName_email_key:{firstName, lastName, email}
//   }
// })

// FOR prisma operations
// const matches = await bcrypt.compare(password, user.passwordHash)
// passwordHash: await bcrypt.hash(password, 10),
// userAuthToken: crypto.randomUUID(),
